/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LotteryInterface extends ethers.utils.Interface {
  functions: {
    "adminAddress()": FunctionFragment;
    "adminWithdraw(uint256)": FunctionFragment;
    "allocation(uint256)": FunctionFragment;
    "buy(uint256,uint8[4])": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "drawed()": FunctionFragment;
    "drawing(uint256)": FunctionFragment;
    "drawingPhase()": FunctionFragment;
    "egg()": FunctionFragment;
    "enterDrawingPhase()": FunctionFragment;
    "generateCombinations(uint8[4])": FunctionFragment;
    "getMatchingRewardAmount(uint256,uint256)": FunctionFragment;
    "getRewardView(uint256)": FunctionFragment;
    "getTotalRewards(uint256)": FunctionFragment;
    "historyAmount(uint256,uint256)": FunctionFragment;
    "historyNumbers(uint256,uint256)": FunctionFragment;
    "initialize(address,address,uint256,uint8,address)": FunctionFragment;
    "issueIndex()": FunctionFragment;
    "lastTimestamp()": FunctionFragment;
    "lotteryInfo(uint256,uint256)": FunctionFragment;
    "lotteryNFT()": FunctionFragment;
    "maxNumber()": FunctionFragment;
    "minPrice()": FunctionFragment;
    "multiBuy(uint256,uint8[4][])": FunctionFragment;
    "multiClaim(uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reset()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setAllocation(uint8,uint8,uint8)": FunctionFragment;
    "setMaxNumber(uint8)": FunctionFragment;
    "setMinPrice(uint256)": FunctionFragment;
    "totalAddresses()": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userBuyAmountSum(uint256,uint64)": FunctionFragment;
    "userInfo(address,uint256)": FunctionFragment;
    "winningNumbers(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allocation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "drawed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drawing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawingPhase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "egg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enterDrawingPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateCombinations",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatchingRewardAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "historyAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "historyNumbers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issueIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryNFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxNumber", values?: undefined): string;
  encodeFunctionData(functionFragment: "minPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multiBuy",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiClaim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAllocation",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userBuyAmountSum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "winningNumbers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawingPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "egg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterDrawingPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateCombinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMatchingRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historyNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issueIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lotteryNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxNumber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBuyAmountSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningNumbers",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,uint256)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "DevWithdraw(address,uint256)": EventFragment;
    "Drawing(uint256,uint8[4])": EventFragment;
    "MultiBuy(address,uint256)": EventFragment;
    "MultiClaim(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reset(uint256)": EventFragment;
    "SetAdmin(address,address)": EventFragment;
    "SetAllocation(address,uint8,uint8,uint8)": EventFragment;
    "SetMaxNumber(address,uint256)": EventFragment;
    "SetMinPrice(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Drawing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAllocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxNumber"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinPrice"): EventFragment;
}

export class Lottery extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LotteryInterface;

  functions: {
    adminAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "adminAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    adminWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminWithdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allocation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "allocation(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    buy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buy(uint256,uint8[4])"(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimReward(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimReward(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    drawed(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "drawed()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    drawing(
      _externalRandomNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "drawing(uint256)"(
      _externalRandomNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    drawingPhase(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "drawingPhase()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    egg(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "egg()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    enterDrawingPhase(overrides?: Overrides): Promise<ContractTransaction>;

    "enterDrawingPhase()"(overrides?: Overrides): Promise<ContractTransaction>;

    generateCombinations(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<{
      0: [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ];
    }>;

    "generateCombinations(uint8[4])"(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<{
      0: [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ];
    }>;

    getMatchingRewardAmount(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMatchingRewardAmount(uint256,uint256)"(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRewardView(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRewardView(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalRewards(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTotalRewards(uint256)"(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    historyAmount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "historyAmount(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    historyNumbers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "historyNumbers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    initialize(
      _egg: string,
      _lottery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,uint8,address)"(
      _egg: string,
      _lottery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    issueIndex(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "issueIndex()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lastTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lotteryInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lotteryInfo(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lotteryNFT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lotteryNFT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    maxNumber(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "maxNumber()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    minPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    multiBuy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multiBuy(uint256,uint8[4][])"(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multiClaim(
      _tickets: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multiClaim(uint256[])"(
      _tickets: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    reset(overrides?: Overrides): Promise<ContractTransaction>;

    "reset()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAllocation(
      _allcation1: BigNumberish,
      _allcation2: BigNumberish,
      _allcation3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllocation(uint8,uint8,uint8)"(
      _allcation1: BigNumberish,
      _allcation2: BigNumberish,
      _allcation3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxNumber(
      _maxNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxNumber(uint8)"(
      _maxNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalAddresses(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalAddresses()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userBuyAmountSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userBuyAmountSum(uint256,uint64)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    userInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    winningNumbers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "winningNumbers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;
  };

  adminAddress(overrides?: CallOverrides): Promise<string>;

  "adminAddress()"(overrides?: CallOverrides): Promise<string>;

  adminWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminWithdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allocation(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "allocation(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  buy(
    _price: BigNumberish,
    _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buy(uint256,uint8[4])"(
    _price: BigNumberish,
    _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimReward(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimReward(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  drawed(overrides?: CallOverrides): Promise<boolean>;

  "drawed()"(overrides?: CallOverrides): Promise<boolean>;

  drawing(
    _externalRandomNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "drawing(uint256)"(
    _externalRandomNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  drawingPhase(overrides?: CallOverrides): Promise<boolean>;

  "drawingPhase()"(overrides?: CallOverrides): Promise<boolean>;

  egg(overrides?: CallOverrides): Promise<string>;

  "egg()"(overrides?: CallOverrides): Promise<string>;

  enterDrawingPhase(overrides?: Overrides): Promise<ContractTransaction>;

  "enterDrawingPhase()"(overrides?: Overrides): Promise<ContractTransaction>;

  generateCombinations(
    number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ]
  >;

  "generateCombinations(uint8[4])"(
    number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ]
  >;

  getMatchingRewardAmount(
    _issueIndex: BigNumberish,
    _matchingNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMatchingRewardAmount(uint256,uint256)"(
    _issueIndex: BigNumberish,
    _matchingNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardView(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRewardView(uint256)"(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalRewards(
    _issueIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalRewards(uint256)"(
    _issueIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  historyAmount(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "historyAmount(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  historyNumbers(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "historyNumbers(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  initialize(
    _egg: string,
    _lottery: string,
    _minPrice: BigNumberish,
    _maxNumber: BigNumberish,
    _adminAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,uint8,address)"(
    _egg: string,
    _lottery: string,
    _minPrice: BigNumberish,
    _maxNumber: BigNumberish,
    _adminAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  issueIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "issueIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "lastTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryInfo(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lotteryInfo(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lotteryNFT(overrides?: CallOverrides): Promise<string>;

  "lotteryNFT()"(overrides?: CallOverrides): Promise<string>;

  maxNumber(overrides?: CallOverrides): Promise<number>;

  "maxNumber()"(overrides?: CallOverrides): Promise<number>;

  minPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "minPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  multiBuy(
    _price: BigNumberish,
    _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multiBuy(uint256,uint8[4][])"(
    _price: BigNumberish,
    _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multiClaim(
    _tickets: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multiClaim(uint256[])"(
    _tickets: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  reset(overrides?: Overrides): Promise<ContractTransaction>;

  "reset()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAdmin(
    _adminAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    _adminAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAllocation(
    _allcation1: BigNumberish,
    _allcation2: BigNumberish,
    _allcation3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllocation(uint8,uint8,uint8)"(
    _allcation1: BigNumberish,
    _allcation2: BigNumberish,
    _allcation3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxNumber(
    _maxNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxNumber(uint8)"(
    _maxNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinPrice(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinPrice(uint256)"(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalAddresses(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userBuyAmountSum(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBuyAmountSum(uint256,uint64)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userInfo(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  winningNumbers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "winningNumbers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    adminAddress(overrides?: CallOverrides): Promise<string>;

    "adminAddress()"(overrides?: CallOverrides): Promise<string>;

    adminWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminWithdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allocation(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "allocation(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    buy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(uint256,uint8[4])"(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    drawed(overrides?: CallOverrides): Promise<boolean>;

    "drawed()"(overrides?: CallOverrides): Promise<boolean>;

    drawing(
      _externalRandomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "drawing(uint256)"(
      _externalRandomNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    drawingPhase(overrides?: CallOverrides): Promise<boolean>;

    "drawingPhase()"(overrides?: CallOverrides): Promise<boolean>;

    egg(overrides?: CallOverrides): Promise<string>;

    "egg()"(overrides?: CallOverrides): Promise<string>;

    enterDrawingPhase(overrides?: CallOverrides): Promise<void>;

    "enterDrawingPhase()"(overrides?: CallOverrides): Promise<void>;

    generateCombinations(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ]
    >;

    "generateCombinations(uint8[4])"(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ]
    >;

    getMatchingRewardAmount(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMatchingRewardAmount(uint256,uint256)"(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardView(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardView(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalRewards(uint256)"(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyAmount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "historyAmount(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyNumbers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "historyNumbers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    initialize(
      _egg: string,
      _lottery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _adminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,uint8,address)"(
      _egg: string,
      _lottery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _adminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    issueIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "issueIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lotteryInfo(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryNFT(overrides?: CallOverrides): Promise<string>;

    "lotteryNFT()"(overrides?: CallOverrides): Promise<string>;

    maxNumber(overrides?: CallOverrides): Promise<number>;

    "maxNumber()"(overrides?: CallOverrides): Promise<number>;

    minPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "minPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiBuy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<void>;

    "multiBuy(uint256,uint8[4][])"(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<void>;

    multiClaim(
      _tickets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "multiClaim(uint256[])"(
      _tickets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reset(overrides?: CallOverrides): Promise<void>;

    "reset()"(overrides?: CallOverrides): Promise<void>;

    setAdmin(_adminAddress: string, overrides?: CallOverrides): Promise<void>;

    "setAdmin(address)"(
      _adminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllocation(
      _allcation1: BigNumberish,
      _allcation2: BigNumberish,
      _allcation3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllocation(uint8,uint8,uint8)"(
      _allcation1: BigNumberish,
      _allcation2: BigNumberish,
      _allcation3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxNumber(
      _maxNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxNumber(uint8)"(
      _maxNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setMinPrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userBuyAmountSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBuyAmountSum(uint256,uint64)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winningNumbers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "winningNumbers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    Buy(user: string | null, tokenId: null): EventFilter;

    Claim(user: string | null, tokenid: null, amount: null): EventFilter;

    DevWithdraw(user: string | null, amount: null): EventFilter;

    Drawing(issueIndex: BigNumberish | null, winningNumbers: null): EventFilter;

    MultiBuy(user: string | null, amount: null): EventFilter;

    MultiClaim(user: string | null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Reset(issueIndex: BigNumberish | null): EventFilter;

    SetAdmin(user: string | null, admin: string | null): EventFilter;

    SetAllocation(
      user: string | null,
      allocation1: null,
      allocation2: null,
      allocation3: null
    ): EventFilter;

    SetMaxNumber(user: string | null, number: null): EventFilter;

    SetMinPrice(user: string | null, price: null): EventFilter;
  };

  estimateGas: {
    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "adminAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminWithdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allocation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allocation(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buy(uint256,uint8[4])"(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimReward(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimReward(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    drawed(overrides?: CallOverrides): Promise<BigNumber>;

    "drawed()"(overrides?: CallOverrides): Promise<BigNumber>;

    drawing(
      _externalRandomNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "drawing(uint256)"(
      _externalRandomNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    drawingPhase(overrides?: CallOverrides): Promise<BigNumber>;

    "drawingPhase()"(overrides?: CallOverrides): Promise<BigNumber>;

    egg(overrides?: CallOverrides): Promise<BigNumber>;

    "egg()"(overrides?: CallOverrides): Promise<BigNumber>;

    enterDrawingPhase(overrides?: Overrides): Promise<BigNumber>;

    "enterDrawingPhase()"(overrides?: Overrides): Promise<BigNumber>;

    generateCombinations(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateCombinations(uint8[4])"(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMatchingRewardAmount(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMatchingRewardAmount(uint256,uint256)"(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardView(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardView(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalRewards(uint256)"(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyAmount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "historyAmount(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyNumbers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "historyNumbers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _egg: string,
      _lottery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,uint8,address)"(
      _egg: string,
      _lottery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    issueIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "issueIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lotteryInfo(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "lotteryNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "maxNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    minPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "minPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    multiBuy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multiBuy(uint256,uint8[4][])"(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<BigNumber>;

    multiClaim(
      _tickets: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multiClaim(uint256[])"(
      _tickets: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    reset(overrides?: Overrides): Promise<BigNumber>;

    "reset()"(overrides?: Overrides): Promise<BigNumber>;

    setAdmin(_adminAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "setAdmin(address)"(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAllocation(
      _allcation1: BigNumberish,
      _allcation2: BigNumberish,
      _allcation3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllocation(uint8,uint8,uint8)"(
      _allcation1: BigNumberish,
      _allcation2: BigNumberish,
      _allcation3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxNumber(
      _maxNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxNumber(uint8)"(
      _maxNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userBuyAmountSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBuyAmountSum(uint256,uint64)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winningNumbers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "winningNumbers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "adminAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminWithdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allocation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allocation(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buy(uint256,uint8[4])"(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimReward(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    drawed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "drawed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawing(
      _externalRandomNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "drawing(uint256)"(
      _externalRandomNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    drawingPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "drawingPhase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    egg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "egg()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterDrawingPhase(overrides?: Overrides): Promise<PopulatedTransaction>;

    "enterDrawingPhase()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    generateCombinations(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateCombinations(uint8[4])"(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMatchingRewardAmount(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMatchingRewardAmount(uint256,uint256)"(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardView(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardView(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewards(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalRewards(uint256)"(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historyAmount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "historyAmount(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historyNumbers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "historyNumbers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _egg: string,
      _lottery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,uint8,address)"(
      _egg: string,
      _lottery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    issueIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "issueIndex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastTimestamp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteryInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lotteryInfo(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lotteryNFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxNumber()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiBuy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multiBuy(uint256,uint8[4][])"(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multiClaim(
      _tickets: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multiClaim(uint256[])"(
      _tickets: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reset(overrides?: Overrides): Promise<PopulatedTransaction>;

    "reset()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAllocation(
      _allcation1: BigNumberish,
      _allcation2: BigNumberish,
      _allcation3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllocation(uint8,uint8,uint8)"(
      _allcation1: BigNumberish,
      _allcation2: BigNumberish,
      _allcation3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxNumber(
      _maxNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxNumber(uint8)"(
      _maxNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userBuyAmountSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBuyAmountSum(uint256,uint64)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winningNumbers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "winningNumbers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
